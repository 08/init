#!/bin/bash

VIRT=$(coreos-detect-virt)

if [ "${VIRT}" != "ec2" ]; then
	# all of this is currently dependent on ec2, we'll refactor as we add more images
	exit 0
fi

C10N_ENDPOINT=https://core-api.appspot.com/v1/c10n/group
META_URL="http://169.254.169.254/latest"

ETCD_BOOTSTRAP="/var/run/etcd/bootstrap.config"

/usr/bin/block-until-url $C10N_ENDPOINT
/usr/bin/block-until-url $META_URL

USER_DATA=$(curl -s --fail $META_URL/user-data)
if [ $? -eq 0 ] && [ ! -z "$USER_DATA" ]; then
        URL=$USER_DATA

        if echo $URL | grep -q '^https://'; then
                
                # Backwards compatibility.  If we have a GitHub gist that doesn't end in /raw, we'll append it to before grabbing the gist
                if echo $URL | grep -e '^https://gist.github.com' | grep -v -e 'raw$'; then
                        CURL_URL=$URL/raw
                else
                        CURL_URL=$URL
                fi

                TMP=`mktemp`

                curl -s "$CURL_URL" > $TMP

                if head -n 1 $TMP | grep -q '^#!'; then # if we get a script starting with #!, we'll run it
                        # run the script
                        chmod +x $TMP && eval $TMP
                else # otherwise, if we get an ssh key, we'll install
                        # validate ssh key
                        ssh-keygen -l -f $TMP > /dev/null 2>&1
                        if [ $? -eq 0 ]; then
                                cat $TMP >> /home/core/.ssh/authorized_keys
                                echo "SSH key updated"
                                chown -R core: /home/core/.ssh/
                        else # not a valid script nor ssh key

                                echo "Not a script or valid ssh key"
                        fi
                fi # else, nothing
        fi
fi

IP=$(curl -s $META_URL/meta-data/local-ipv4)
curl -s $C10N_ENDPOINT -d "c10n_url=$URL" -d"ip_list=$IP" > $ETCD_BOOTSTRAP
